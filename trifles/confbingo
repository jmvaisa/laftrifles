#!/bin/bash
#############################################################################
#	confbingo	conference call bingo
#
#	Generate 24 unique conference call event descriptions, then
#	arrange into a 5x5 bingo card with a FREE space at the center.
#
#	Format of the output bingo card is:
#
#	+------+------+------+------+------+
#	|  L1  |  L1  |  L1  |  L1  |  L1  |
#	|  L2  |  L2  |  L2  |  L2  |  L2  |
#	|  L3  |  L3  |  L3  |  L3  |  L3  |
#	+------+------+------+------+------+
#	|  L1  |  L1  |  L1  |  L1  |  L1  |
#	|  L2  |  L2  |  L2  |  L2  |  L2  |
#	|  L3  |  L3  |  L3  |  L3  |  L3  |
#	+------+------+------+------+------+
#	|  L1  |  L1  |      |  L1  |  L1  |
#	|  L2  |  L2  | FREE |  L2  |  L2  |
#	|  L3  |  L3  |      |  L3  |  L3  |
#	+------+------+------+------+------+
#	|  L1  |  L1  |  L1  |  L1  |  L1  |
#	|  L2  |  L2  |  L2  |  L2  |  L2  |
#	|  L3  |  L3  |  L3  |  L3  |  L3  |
#	+------+------+------+------+------+
#	|  L1  |  L1  |  L1  |  L1  |  L1  |
#	|  L2  |  L2  |  L2  |  L2  |  L2  |
#	|  L3  |  L3  |  L3  |  L3  |  L3  |
#	+------+------+------+------+------+
#
#	. . . where each cell contains a different 3-line event
#	description, the first line being L1, the second L2, the third
#	L3.  Columns will be straight (i.e., all cells in a column will
#	be the same width), but automatically sized based on length of
#	longest line in the column, so different columns may have
#	different widths.
#
#	SUGGESTED PLAY: Once generated, ALL bingo cards are distributed
#	to ALL players, with each card marked as assigned to one
#	specific player.  During the conference call, players can
#	conduct an online meeting on the side to track play.  When a
#	call participant generates an event, players mark matching
#	squares on their cards (excluding events generated by players
#	themselves might be a good idea - see below).  Five squares in a
#	line (horizontally, vertically, or diagonally) scores a BINGO,
#	allowing the winner to collect one point for every marked square
#	on their card (the FREE square is only counted if part of the
#	BINGO).  If it is decided that player events are NOT excluded, a
#	player is BUSTED and disqualified from the round if called out
#	by a non-player for acting suspiciously.  This rule is essential
#	to maintaining the viability of the game (and the integrity of
#	the call!) by penalizing reckless behavior.
#
#	Details of organizing longer term competition with multiple
#	rounds, calling BINGO, verifying results, and/or adjudicating
#	disputes are left to the local player community.
#############################################################################

#############################################################################
#	Process command line options
#############################################################################
#
#USAGE="${0##*/} [-a aval] [-b bval] [-c] [-d]
#
#aval	is the desired value for AOPT
#bval	is the desired value for BOPT
#-c	indicates flag COPT should be set
#-d	indicates flag DOPT should be set
#"
#while getopts a:b:cd optc
#do
#	case $optc in
#		a)	AOPT=$OPTARG ;;
#		b)	BOPT=$OPTARG ;;
#		c)	COPT=true ;;
#		d)	DOPT=true ;;
#		*)	echo "$USAGE" >&2
#			exit 1
#			;;
#	esac
#done
#shift $(( $OPTIND - 1 ))
##############################################################################

#############################################################################
#	Record PLAYER name if provided as command line argument.  If
#	this is specified, an index of plays on this card will be output
#	before the card itself.
#############################################################################

PLAYER="${1:-}"

#############################################################################
#	Set up bingo coordinates for the 24 event descriptions on this
#	card.  Columns are B, I, N, G, O, and rows are 1-5.  This will
#	be used for labeling events in the index if a player name was
#	provided.  Note that N3 is skipped, since this will always be a
#	FREE space.
#############################################################################

BC=(
B1 I1 N1 G1 O1
B2 I2 N2 G2 O2
B3 I3    G3 O3
B4 I4 N4 G4 O4
B5 I5 N5 G5 O5
)

#############################################################################
#	Define Functions
#############################################################################

#############################################################################
#	Body of script
#############################################################################

#############################################################################
#	List of conference call events.  To facilitate processing, we
#	use spaces as line separators, "!" chars for spaces, and "="
#	chars for "'" (apostrophe) chars.  These will be replaced during
#	formatting of final output.
#############################################################################

EVENTS=(
'I=ll!have to!get!back with!you'
'Can!you all!see my!screen?'
'Sorry, I!was on!mute'
'Sorry, go!ahead, no!really'
'I!didn=t!catch that,!could!you repeat!it?'
'So![unclear]!I can![static]!by [cut!out],!okay?'
'Sorry!I=m late,!I [lame!excuse]'
'I!have a!hard stop!at'
'Could!you repeat!that, you!cut!out'
'Can!someone add!me!to the!meeting?'
'Next slide please'
'If!you!are!not talking,!please go!on!mute'
'Sorry,!having connection issues'
'I!think there!is a!lag'
'Can!someone give!them the!PIN?'
'[Child!or animal!in background]'
'Can!you email!that to!everyone?'
'[Painfully loud echo]'
'[Annoyingly loud typing]'
'[Beep] Did!someone just!join?'
'[Insert!name], are!you there?'
'Can!you hear me?'
'Can!we take!this offline?'
'Let=s!wait!a few!minutes!for others!to!join'
'Uh, you=re!still not!sharing'
'No, it=s!still loading'
'I!need to!join another!call'
'Hello,!hello, am!I on!mute?'
'Let=s review!the last!call'
)


#############################################################################
#	Select 24 unique events and add to EVLIST array one at a time.
#############################################################################

EVLIST=()

for EVSEL in $(shuf -i 0-$(( ${#EVENTS[*]} - 1 )) | head -24)
do
	EVLIST=( "${EVLIST[@]}" "${EVENTS[$EVSEL]}" )
done

#############################################################################
#	Optional - if a PLAYER was named, output an alphabetically
#	sorted index of the event descriptions, suffixed with the PLAYER
#	name and card coordinate to facilitate searches.
#############################################################################

if [ "$PLAYER" ]
then
	LOC=0
	for BPHRASE in "${EVLIST[@]}"
	do
		echo "- $BPHRASE ($PLAYER ${BC[$((LOC++))]})"
	done | tr "!=" " '" | sort
fi

#############################################################################
#	Insert the FREE cell in the middle of the array.  The characters
#	here will form the following ASCII art:
#
#	.-. .-. .-. .-.
#	|-  |(  |-  |- 
#	'   ' ' `-' `-'
#
#	. . . when the ! marks are replaced with spaces in post-processing.
#	Spaces cannot be used here because they would confuse the word
#	separation and column -t alignment.
#############################################################################

EVLIST=( "${EVLIST[@]:0:12}" \
	".-.!.-.!.-.!.-.  |-!!|(!!|-!!|- '!!!'!'!\`-'!\`-'" \
	"${EVLIST[@]:12:12}" )

#############################################################################
#	Begin the code block that generates the unformatted array.
#	Define the row separator string and output it.
#############################################################################

{
ROWSEP="+ ---- + ---- + ---- + ---- + ---- +"
echo "$ROWSEP
| !#####!! | !######! | !##!!##! | !!####!! | !!####!! |
| !##!!##! | !!!##!!! | !###!##! | !##!!!!! | !##!!##! |
| !#####!! | !!!##!!! | !##!###! | !##!###! | !##!!##! |
| !##!!##! | !!!##!!! | !##!!##! | !##!!##! | !##!!##! |
| !#####!! | !######! | !##!!##! | !!####!! | !!####!! |
$ROWSEP
"

#############################################################################
#	Process EVLIST elements in groups of 5, with ROWVAL being set to
#	the first element of each group.  Each cell of the bingo card is
#	3 lines high, with one line of that cell's event description on
#	each line.  Initialize the three lines for this row of cells
#	(stored in R1, R2, R3, for the 1st, 2nd, and 3rd line of each
#	3-line event description, respectively) with the left hand
#	|-character edge.
#############################################################################

for ROWVAL in 0 5 10 15 20
do
	R1="|"
	R2="|"
	R3="|"

#############################################################################
#	Put each 3-line description of the group into cell contents
#	holder BCELL, which is then word separated into the CLINE array
#	(for lines in this cell).  Append each element of CLINE to the
#	appropriate Rx line, followed by the |-char column separator.
#############################################################################

	for BCELL in "${EVLIST[@]:${ROWVAL}:5}"
	do
		CLINE=( $BCELL )
		R1="${R1} ${CLINE[0]} |"
		R2="${R2} ${CLINE[1]} |"
		R3="${R3} ${CLINE[2]} |"
	done

#############################################################################
#	Output the three lines for this row of cells, followed by the row
#	separator.
#############################################################################

	echo -e "${R1}\n${R2}\n${R3}\n${ROWSEP}"
done

#############################################################################
#	Finally, we end the unformatted output block.  Post-processing
#	performs three functions:
#	1. column -t aligns all the words and column separators into
#	straight columns, sizing each column to fit the longest line in
#	that column
#	2. the first part of the sed replaces all spaces in the
#	row separator lines with '-' characters
#	3. the second part of the sed replaces all '!' characters with
#	spaces (to make the text and the FREE space ASCII art readable)
#	4. the third part of the sed replaces all '=' characters with
#	apostrophes
#############################################################################

} | column -t | sed -e "/----/s/ /-/g" -e "s/!/ /g" -e "s/=/'/g"

#############################################################################
#	EOF confbingo
#############################################################################
