#!/bin/ksh
##############################################################################
#	rps_gen - Script to play arbitrary ROCK PAPER SCISSORS variants
##############################################################################
#	This is a simple RPS (Rock/Paper/Scissors) game engine that
#	takes in arbitrary play lists ordered by play ranking and plays
#	a simple random selection game against you.  The order of the
#	PLAY array is significant, but playlist logic is simple - given
#	a game with 2X+1 plays (only odd-numbered playlists work for
#	balanced RPS games) and viewing the playlist as a circular list,
#	a given play defeats the X plays before it and is defeated by
#	the X plays after it.  ROCK PAPER SCISSORS is the trivial
#	example, but one published RPS variant offers 101 plays!
#
#	For added entertainment value, you may specify a "play outcome
#	description" file containing simple textual descriptions of how
#	each play overmatches the play(s) it defeats.
##############################################################################

typeset -i HPICK

##############################################################################
#	Evaluate options.  We have option -f for specifying the playfile, a
#	text file providing descriptions of possible outcomes, and -g for
#	requesting generation of a generic playfile.
##############################################################################

USAGE="
${0##*/} { [-f playfile] | [-g] } play1 play2 play3 . . . .

Where the optional playfile is a text file describing outcomes,
one line per outcome.

Lines are of the form:

WINNER defeats LOSER

. . . and 'defeats' may be any text describing how the WINNER
overmatches the LOSER.  Not strictly necessary, but amusing.

The -g option will send to stdout a generic list of outcomes for the provided
playlist, with all outcomes described as 'defeats'.  This can then be
captured to a playfile and edited to produce more tailored descriptions.
The -f option has no effect when -g is specified.
"

GENOUT=
PLAYFILE=
while getopts gf: optc
do
	case $optc in
		g)	GENOUT=true ;;
		f)	PLAYFILE=$OPTARG ;;
		*)	echo "$USAGE" >&2
			exit 1
			;;
	esac
done
shift `expr $OPTIND - 1`

##############################################################################
#	After options are processed, the count of remaining arguments is the
#	number of plays for this game - save that in ARGCNT (we'll use it
#	for game logic calculation).  If a PLAYFILE was specified, make sure
#	it exists and is readable.
##############################################################################

ARGCNT=$#

if [ "$PLAYFILE" -a ! -r "$PLAYFILE" ]
then
	echo "No readable file $PLAYFILE found." >&2
	exit 1
fi

##############################################################################
#	Once the playlist size is known, we calculate MATCHCNT at half of
#	(ARGCNT - 1).  MATCHCNT determines how many plays immediately after
#	the selected play will defeat the selected play.  Even numbered
#	lists don't work with RPS game logic, so are rejected.
##############################################################################

MATCHCNT=$(( $ARGCNT / 2 ))
if [ $(( ($MATCHCNT * 2) + 1 )) != $ARGCNT -o $ARGCNT -lt 3 ]
then
	echo "You must list an odd number of plays."
	exit 1
fi

##############################################################################
#	Establish array of PLAYs from remaining command line arguments
##############################################################################

set -A PLAY $*


##############################################################################
#	If GENOUT is set, just output a generic outcomes files for this
#	play list and exit.
##############################################################################

if [ "$GENOUT" ]
then
	WINPLAY=0
	while [ $WINPLAY -lt $ARGCNT ]
	do
		MATCHOFF=$(( $ARGCNT + $WINPLAY + $MATCHCNT + 1 ))
		LOSECNT=0
		while [ $LOSECNT -lt $MATCHCNT ]
		do
			LOSEPLAY=$(( ($LOSECNT + $MATCHOFF) % $ARGCNT ))
			echo "${PLAY[$WINPLAY]} defeats ${PLAY[LOSEPLAY]}"
			LOSECNT=$(( $LOSECNT +1 ))
		done
		WINPLAY=$(( $WINPLAY +1 ))
	done
	exit 0
fi

##############################################################################
#	end GENOUT - rest of script is for actual game play
##############################################################################


##############################################################################
#	Format a PLAYLIST - 
##############################################################################

PLAYLIST=$(echo "${PLAY[*]}" | tr ' ' '\n' | nl | expand)
LONGEST=$( echo "$PLAYLIST" | wc -L )

set -A SCRDIMS $(stty size)
PCOLS=${SCRDIMS[1]}

#PLAYLIST=$( echo "$PLAYLIST" |
#	pr -te -w${PCOLS} -$(( $PCOLS / ($LONGEST + 1) )) |
#	expand )

PLAYLIST=$( echo "$PLAYLIST" |
	expand | column -c72 )

##############################################################################
#	Running total scores start at zero for machine (M) and human (H)
##############################################################################

MSCORE=0
HSCORE=0

##############################################################################
#	Extent of our fancy screen management - we'll clear the screen to
#	start and between rounds.
##############################################################################

CLR=$(tput clear)

echo "$CLR"

##############################################################################
#	Main loop takes the rest of the script.  We start off by saving
#	the text of the human player's pick in HTEXT after reporting the
#	current score.
##############################################################################
while :
do

echo "
My score:       $MSCORE
Your score:     $HSCORE

Enter number for your play from this list:

$PLAYLIST
"

read  HTEXT?"
Select: "

##############################################################################
#	If player makes null pick, we're finished, so exit.  If the player's
#	pick is out of range, clear the screen and restart the loop.
#	Otherwise, save to integer HPICK and subtract 1 from the pick (for
#	array offset purposes - array subscripts are zero-based).
##############################################################################

if [ -z "$HTEXT" ]
then
	if [ $MSCORE -gt $HSCORE ]
	then
		figlet -w${COLUMNS} Ha ha ha - I win !
	elif [ $HSCORE -gt $MSCORE ]
	then
		figlet -w${COLUMNS} ouch - You WIN ! !
	else
		figlet -w${COLUMNS} yawn - We tied.
	fi
        exit 0
else
	HPICK="$HTEXT"
fi

if [ "$HPICK" -gt $ARGCNT -o "$HPICK" -lt 1 ]
then
	echo "$CLR"
	continue
else
        let HPICK=$HPICK-1
fi

##############################################################################
#	We make the random machine pick, then calculate the outcome.  This
#	is why the order of PLAY array elements is significant - the effect
#	of the scoring logic is to rotate the play list to put the human's
#	pick at the start of the list.  If the machine picks any of the next
#	MATCHCNT plays, it wins; otherwise, the human wins.
##############################################################################

MPICK=$(( $RANDOM % $ARGCNT ))

OUTCOME=$(( ($ARGCNT + $MPICK - $HPICK) % $ARGCNT ))

if [ $OUTCOME -eq 0 ]
then
	RESULT="we DRAW"
elif [ $OUTCOME -gt $MATCHCNT ]
then
	RESULT="you WIN"
else
	RESULT="you LOSE"
fi

##############################################################################
#	Here's where we generate the "outcome detail" report.  We set the
#	WINNER and LOSER values based on the PLAYs selected by HPICK and
#	MPICK.  OUTCOME is empty by default (for DRAWs), but if there is a
#	WINNER, we report that.  If a PLAYFILE has been specified with text
#	for various outcomes, we'll use a line from that if there's a match;
#	otherwise we generically report that "WINNER defeats LOSER"
##############################################################################

if [ "$RESULT" = "you WIN" ]
then
	WINNER="${PLAY[$HPICK]}"
	LOSER="${PLAY[$MPICK]}"
elif [ "${RESULT}" = "you LOSE" ]
then
	WINNER="${PLAY[$MPICK]}"
	LOSER="${PLAY[$HPICK]}"
else
	WINNER=""
	LOSER=""
fi

OUTCOME=""

if [ "$WINNER" -a "$LOSER" ]
then
	if [ "$PLAYFILE" ]
	then
		OUTCOME=$(egrep "^$WINNER .* ${LOSER}$" $PLAYFILE)
	fi
	if [ -z "$OUTCOME" ]
	then
		OUTCOME="$WINNER defeats $LOSER"
	fi
fi

##############################################################################
#	Now that we've determined our outcome, just report the PLAYs, the
#	rule explaining the OUTCOME, and the RESULT.
##############################################################################

echo "${CLR}
  I show ${PLAY[$MPICK]}
You show ${PLAY[$HPICK]}

${OUTCOME} . . . so ${RESULT}!


"

##############################################################################
#	Increment the appropriate score total and go on to next iteration of
#	our main loop.
##############################################################################

case ${RESULT} in
*WIN)   let HSCORE=$HSCORE+1 ;;
*LOSE)  let MSCORE=$MSCORE+1 ;;
esac

done # while read  HPICK

##############################################################################
#	EOF
##############################################################################
