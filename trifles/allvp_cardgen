#!/bin/bash

#############################################################################
# Generate an associative array of retrievable playing card images.  ASCII art
# can be retrieved using a "card ID code" array key (e.g., four of hearts would
# be 4-H)
#############################################################################

#
# Some credit for the card ASCII artwork: here's how FIGlet's "cards" font
# (Author: myflix, Nov 2003) outputs "1234":
#.------..------..------..------.
#|1.--. ||2.--. ||3.--. ||4.--. |
#| :/\: || (\/) || :(): || :/\: |
#| (__) || :\/: || ()() || :\/: |
#| '--'1|| '--'2|| '--'3|| '--'4|
#`------'`------'`------'`------'
# These were used as the model for the card images defined below.
#

#
# The first argument determines how the script will behave.  If no arguments
# are provided, the script just populates the CDECK associative arrray with
# card-ID keys and card images and exits silently (this can be sourced in by
# another script that then uses CDECK, as is done by allvp).  Otherwise, arg1
# is assigned to be a designated delimiter string to be output after each card
# image; there is special behavior if the delimiter string is "Demo" (see
# below).
#

DELIM="${1}"

#
# Create associative array CSUIT with a card image for each suit, putting an
# "X" in the place of the card value (these are based on the FIGlet "card"
# font as noted above).
#

declare -A CSUIT

CSUIT[S]='
.------.
|X.--. |
| :/\: |
| (__) |
| '"'--'"'X|
`------'"'"

CSUIT[H]='
.------.
|X.--. |
| (\/) |
| :\/: |
| '"'--'"'X|
`------'"'"

CSUIT[C]='
.------.
|X.--. |
| :(): |
| ()() |
| '"'--'"'X|
`------'"'"

CSUIT[D]='
.------.
|X.--. |
| :/\: |
| :\/: |
| '"'--'"'X|
`------'"'"


#
# Set up our array of card images.  After declaring CDECK as an associative
# array, step through the suits and face values in order.  For each SUIT, fill
# CPIC with the corresponding element of the CSUIT array, then for each VAL
# replace X with the current VAL before adding to CDECK with a key of VAL-SUIT.
#

declare -A CDECK

for SUIT in S H C D
do
	CPIC="${CSUIT[$SUIT]}"
	for VAL in A 2 3 4 5 6 7 8 9 T J Q K
	do
		CDECK[${VAL}-${SUIT}]="${CPIC//X/$VAL}"
	done
done

#
# For use as a wild deuce, we add a wild card image with a card ID of "2-W"
#

CDECK[2-W]='
.------.
|2 ** W|
|*|  |*|
|*|/\|*|
|W ** 2|
`------'"'"

#
# Special case - 10s are identified by a card ID with a value of T so that all
# ID values are single-character.  In the card images this isn't very
# intuitive, so step through and edit those to replace each T with a 10 (taking
# into account the adjacent character that must be replaced as well).
#

for SUIT in S H C D
do
	TPIC=${CDECK[T-${SUIT}]}
	TPIC=${TPIC/T./10}
	TPIC=${TPIC/\'T/10}
	CDECK[T-${SUIT}]="$TPIC"
done

#
# At this point, we're done unless the designated delimiter string DELIM is
# populated.  If DELIM contains "demo" (case insensitive), go into an
# interactive loop prompting for card IDs and responding with the corresponding
# card image.
#

if [ "${DELIM,,}" = "demo" ]
then
while read -p "Enter card ID: " CARDID
do
	test "$CARDID" || break
	CARDID=${CARDID^^}
	echo "${CDECK[${CARDID}]}" | nl -ba
done

#
# For all other values of DELIM, output each card in the deck in the order
# shown; the wild deuce is output last.  This was how the compressed deck used
# inside allvp was generated.
#

elif [ "$DELIM" ]
then
	for SUIT in S H C D
	do
		for VAL in A 2 3 4 5 6 7 8 9 T J Q K
		do
			echo "${CDECK[${VAL}-${SUIT}]}${DELIM}"
		done
	done
	echo -e "\n${CDECK[2-W]}${DELIM}"
	exit 0
fi

#
# END
#
