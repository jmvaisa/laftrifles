#!/bin/bash
############################################################################## 
#	$Header$
#
#	NAME		TITLE
#	simps		Simplified Integrated Modular Prose System
#
#	SYNOPSIS
#	simps [count]
#	count is number of SIMP sentences to generate; defaults to 1
#	
#	DESCRIPTION
#	Unknown subversive engineers at Honeywell Computers (the original
#	British spellings suggest a U.K. origin) developed this list of
#	impressive sounding component phrases to construct 10,000 unique
#	technical-sounding (but vacuous) sentences for use in internal
#	memoranda.  This shell script contains the SIMP phrase tables (with
#	those Brit spellings "corrected" for American usage) and executes a
#	procedure for assembling them into impenetrable double talk.  An
#	optional "partial SIMP" (pSIMP) flag (-p) allows for generation of
#	shorter sentences omitting one or two of the component phrases,
#	providing an additional 2,100 possibilities.
#
#	RETURN VALUE
#	none meaningful
#	
#	NOTES / CAVEATS
#	While SIMP's drivel seems fairly timeless, it may be necessary to
#	update some of these phrases in the future.  While sites may review
#	and adjust the phrase lists as needed, editors are strongly cautioned
#	to study the lists carefully to make sure new/substituted phrases
#	adhere to the grammatical structure of the existing opening, subject,
#	action, and/or object phrases, or generated sentences will not be
#	grammatically correct.  For now, we have replaced the overtly military
#	(hence over-specific) phrase "the greater fight-worthiness concept"
#	with the more generic "the greater deployment-worthiness concept" (we
#	had considered "market-worthiness", but concluded that this would not
#	be applicable for government bureaucrats).
#		
#	SIMP is for entertainment purposes only.  Usage of SIMP in official
#	communications might be considered sabotage in some organizations,
#	though obviously they'd have to notice first.
#		
#	AUTHOR, REVIEWER
#	Leif Fellague - Mon Jan 26 2015
#
#	$Log$
#	Thu Apr 21 17:19:05 MDT 2016
#	Added the -p flag and supporting logic to generate pSIMP.
#		
##############################################################################

typeset -i NBR

##############################################################################
#	Process -p flag for the pSIMP option.  When specified, the generated
#	SIMP may randomly omit Opening and/or Object clauses, providing an
#	additional 2100 possible SIMP sentences.
#
#	NOTE:  Any non-whitespace characters immediately following "-p" will
#	appear in SIMP sentences in place of the omitted clause(s).  This
#	feature was originally for debugging, but can also be used to filter
#	for shorter SIMP.
##############################################################################
if [ "${1:0:2}" = "-p" ]
then
	EMPTY=1
	FLAG=${1:2}
	shift
else
	EMPTY=0
fi

##############################################################################
#	Determine number of phrases for SIMP to generate
##############################################################################
if [ "$1" -gt 0 ] 2>/dev/null
then
	NBR=$1
else
	NBR=1
fi

##############################################################################
#	Define Opening clauses
##############################################################################
OPEN=(
	"In particular," \
	"On the other hand," \
	"However," \
	"Similarly," \
	"As a resultant implication," \
	"In this regard," \
	"Based on integral subsystem considerations," \
	"For example," \
	"Thus," \
	"In respect to specific goals,"
	)

##############################################################################
#	Define Subject clauses.   These are formatted here to appear at the
#	beginning of the sentence, but are modified to follow the Opening
#	clause when the Opening is non-empty (see below).
##############################################################################
SUBJECT=(
	"A large portion of the interface coordination communication" \
	"A constant flow of effective information" \
	"The characterization of specific criteria" \
	"Initiation of critical subsystem development" \
	"The fully integrated test program implication" \
	"The product configuration baseline" \
	"Any associated supporting element" \
	"The incorporation of additional mission constraints" \
	"The independent functional principle" \
	"The primary inter-relationship between system specific goals, and/or subsystem technologies"
	)

##############################################################################
#	Define Action clauses.  To support pSIMP, alternate phrasing must be
#	used when the Action clause is the end of the SIMP sentence.
##############################################################################
ACTION=(
	"must utilize and be functionally interwoven with " \
	"maximizes the probability of project success and minimizes the cost and time required for " \
	"adds explicit performance limits to " \
	"necessitates that urgent consideration be applied to " \
	"requires considerable systems analysis and trade-off studies to arrive at " \
	"is further compounded when taking into account " \
	"presents extremely interesting challenges to " \
	"recognizes the importance of other systems and the necessity for " \
	"effects a significant implementation of " \
	"adds overriding performance constraints to "
	)

ACTION_END=(
	"must be utilized and functionally interwoven." \
	"maximizes the probability of project success and minimizes the cost and time required." \
	"adds explicit performance limits." \
	"necessitates that urgent consideration be applied." \
	"requires considerable systems analysis and trade-off studies." \
	"is further compounded when taken into account." \
	"presents extremely interesting challenges." \
	"recognizes the importance of other systems." \
	"effects a significant implementation." \
	"adds overriding performance constraints."
	)

##############################################################################
#	Define Object clauses
##############################################################################
OBJECT=(
	"the sophisticated hardware." \
	"the anticipated fourth generation equipment." \
	"the subsystem compatibility testing." \
	"the structural design, based on system engineering concepts." \
	"the preliminary qualification limit." \
	"the evolution of specifications over a given time period." \
	"the philosophy of commonality and standardization." \
	"the greater deployment-worthiness concept." \
	"any discrete configuration mode." \
	"the total system rationale."
	)


##############################################################################
#	Enter main SIMP-generating loop.  We'll repeat this NBR times.
##############################################################################

while [ $NBR -gt 0 ]
do

##############################################################################
#	Generate selector values for Opening and Object clauses.  The EMPTY
#	variable will determine whether selection is based on the size of the
#	array or one larger (allowing for selection of empty clauses).
##############################################################################

	OPNCNT=$(( $RANDOM % (${#OPEN[*]}+${EMPTY}) ))
	OBJCNT=$(( $RANDOM % (${#OBJECT[*]}+${EMPTY}) ))


##############################################################################
#	If the Opening clause is non-empty, shift the Subject clause to lower
#	case and pre-pend a space.
##############################################################################

	XOPEN=${OPEN[${OPNCNT}]}

	XSUBJ=${SUBJECT[$RANDOM%${#SUBJECT[*]}]}
	test "$XOPEN" && XSUBJ=" ${XSUBJ,,}"


##############################################################################
#	If the Object clause is non-empty, select the Action clause from the
#	standard array, otherwise use the "Action ending" array.
##############################################################################

	XOBJT="${OBJECT[${OBJCNT}]}"

	test "$XOBJT" \
		&& XACTN=${ACTION[$RANDOM%${#ACTION[*]}]} \
		|| XACTN=${ACTION_END[$RANDOM%${#ACTION_END[*]}]}


##############################################################################
#	Once all components are loaded, output SIMP and decrement the counter.
##############################################################################

	echo "${XOPEN:-${FLAG}}${XSUBJ} ${XACTN}${XOBJT:-${FLAG}}"

	NBR=${NBR}-1
done

##############################################################################
#	EOF $Source$
##############################################################################
