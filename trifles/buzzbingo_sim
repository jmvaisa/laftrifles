#!/bin/ksh
##############################################################################
# This buzzbingo session simulator will run buzzbingo to create bingo cards
# for players listed on the command line, then proceed to draw phrases from
# those cards and report them to stdout along with which of the cards has a
# match.
#
# This is probably best run in a junk directory that one can discard when
# finished.  If not, bingo card files are all of the form
# <player_name>_card.txt; the simulator will ask before overwriting any
# matching files found as it generates the cards, but obviously the
# existing file may not work if it was not generated by buzzbingo.
##############################################################################
#- agile logistical flexibility (mary G3)


typeset -L1 -u U1REPLY

PLAYERS=( $* )
set -A CARDFILES

for PLAYER in ${PLAYERS[*]}
do
	CARDFILE=${PLAYER}_card.txt
	CARDFILES=( ${CARDFILES[*]} $CARDFILE )
	if [ -f $CARDFILE ]
	then
		read U1REPLY?"Overwrite $CARDFILE? "
		test "$U1REPLY" = Y || continue
	fi
	buzzbingo $PLAYER > $CARDFILE
	cat $CARDFILE | grep -v "^- "
	echo "\
Above card is for $PLAYER
------------------------------"
	read REPLY?"Hit <enter> to continue: "
done

IDXFILE=$(mktemp -t bpbgo.XXXXXXXX)
DRAWNFILE=$(mktemp -t bpbgo.XXXXXXXX)

##############################################################################
# With the relevant global variables populated, we define our ScoreCard
# function.  After each draw, we step through the list of players and extract
# all their matches so far, then sort by card square ID and merge the square
# IDs into a single line.  A sed command is then used to filter for winning
# sequences.  This requires a little extra thought for the diagonals, since
# B-I-N-G-O are not in alphabetical order.  Literal matches are used for the
# four lines with the FREE square (including the SWNE and NWSE diagonals),
# while remaining ACROSS and DOWN lines can be handled with repeated
# subexpressions.
##############################################################################

ScoreCard()
{
set -A BINGOS
for PLAYER in ${PLAYERS[*]}
do
	BINGO="$(grep '('"${PLAYER} " $DRAWNFILE  |
		sed "s/^.*(${PLAYER} \(.*\))/\1/" |
		sort | ( tr '\012' ' ' ; echo ))"
	BINGO=$(echo "$BINGO" |
		sed "\
s/^.*B3.*G3.*I3.*O3.*$/BINGO-ACROSS/
s/^.*N1.*N2.*N4.*N5.*$/BINGO-DOWN/
s/^.*B5.*G2.*I4.*O1.*$/BINGO-SWNE/
s/^.*B1.*G2.*I2.*O5.*$/BINGO-NWSE/
s/^.*B\(.\).*G\1.*I\1.*N\1.*O\1.*4/BINGO-ACROSS/
s/^.\(.\)1.*\12.*\13.*\14.*\15.*$/BINGO-DOWN/
")
	if [ "${BINGO}" != "${BINGO#BINGO}" ]
	then
		cat ${PLAYER}_card.txt | grep -v "^-"
		grep '('"${PLAYER} " $DRAWNFILE |
			sort -k2 -t'('
		BINGOS=( "${BINGOS[@]}" "${BINGO} for $PLAYER!" )
	fi
done
if [ "$BINGOS" ]
then
	for BINGO in "${BINGOS[@]}"
	do
		print "\a${BINGO}"
	done
fi
}

trap 'rm -f ${IDXFILE} ${DRAWNFILE} ; exit' 0 1 2 3 9 15


cat ${CARDFILES[*]} | grep -- "^-" | cut -f1 -d'(' |
	sort -u  > $IDXFILE

COUNTER=0
shuf < $IDXFILE |
while read LINE
do
	print "\n[$((++COUNTER))] -------------------------\nSomebody just said '${LINE#- }'"
	cat ${CARDFILES[*]} | grep -- "$LINE" |
		tee -a $DRAWNFILE | sed "s/$/<<<<<==============================/"
	ScoreCard
	read GET?"Next: " </dev/tty
done

##############################################################################
# END
##############################################################################
