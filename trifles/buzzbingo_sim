#!/bin/ksh
##############################################################################
# This buzzbingo session simulator will run buzzbingo to create bingo cards
# for players listed on the command line, then proceed to draw phrases from
# those cards and report them to stdout along with which of the cards has a
# match.
#
# This is probably best run in a junk directory that one can discard when
# finished.  If not, bingo card files are all of the form
# <player_name>_card.txt; the simulator will ask before overwriting any
# matching files found as it generates the cards, but obviously the
# existing file may not work if it was not generated by buzzbingo.
##############################################################################

typeset -L1 -u U1REPLY

PLAYERS=( $* )
set -A CARDFILES

for PLAYER in ${PLAYERS[*]}
do
	CARDFILE=${PLAYER}_card.txt
	CARDFILES=( ${CARDFILES[*]} $CARDFILE )
	if [ -f $CARDFILE ]
	then
		read U1REPLY?"Overwrite $CARDFILE? "
		test "$U1REPLY" = Y || continue
	fi
	buzzbingo $PLAYER > $CARDFILE
done

IDXFILE=$(mktemp -t bpbgo.XXXXXXXX)
DRAWNFILE=$(mktemp -t bpbgo.XXXXXXXX)

trap 'rm -f ${IDXFILE} ${DRAWNFILE} ; exit' 0 1 2 3 9 15


cat ${CARDFILES[*]} | grep -- "^-" | cut -f1 -d'(' |
	sort -u  > $IDXFILE

shuf < $IDXFILE |
while read LINE
do
	print "\n-------------------------\nSomebody just said '${LINE#- }'"
	cat ${CARDFILES[*]} | grep -- "$LINE" | tee -a $DRAWNFILE
	read GET?"Next: " </dev/tty
done

##############################################################################
# END
##############################################################################
